シミュレーションの下準備

DBについての準備
・user_idとquestion_idのセットが入っているテーブルを用意する
　ーこれには、大体３０００件のデータを入れる予定
　ーこれは、ユーザがどの問題に挑戦したのかを表す
・user_idに紐づいて真の実力が格納されているテーブル
・question_idに紐づいて真の難易度が格納されているテーブル

シミュレーションの流れ
・user_idとquestion_idのセットが入っているテーブルからデータを取得
・同様に真の実力と難易度のハッシュを作成しておく
・１で取ってきたデータを一つ取得
・２で作ったハッシュを基に真の実力と難易度を取得
・真の実力と難易度を引数にモデル計算を行う
・モデル計算結果をstatusテーブルに保存
・３で取ってきたデータセットのuser_id, question_idを基にそれぞれの評価を行う
・３〜７を繰り返す

プログラム構成
１、２は単発のメソッド定義だけ

ユーザのモデルについて
｜実力と　ー　難易度｜　＞　５
なら確実に成功or失敗
　ーなぜ差を５と考えたのか
　　ー実力と難易度の振れ幅を１〜１０と考えている
　　ーまた、本システムの値は大まかに以下ぐらいのレベル規模を想定している
　　ー１は大学１年生程度の知識を持った学生
　　ー５は大学４年生程度の知識を持った学生
　　ー１０はプログラミングコンテストレベル（ここでは解く為にある程度の知識と経験が必要なレベルを想定している）
　　ーそのため、大学一年生程度の知識で大学４年生が解く問題を解ける確率は非常に低いと考えた。
　　ーまた、大学４年生程度の知識だけでは、プログラミングコンテストの問題を解ける確率は非常に低いと考えた。
　　ー以上のことから、絶対値の差が５以上なら成功or失敗と考えた
成功率を調整するようの計算式
正解率（ans）　＝　５０　＋　１０＊（実力　ー　難易度）

正解率における分布
ans　＝　１００　＝　Accepted(テストデータを全て通った)
ans　＝　０　　　＝　Compile Error
乱数生成する値x（0~100）を考える
生成されたxの値が
(ans - x) = gap
それ以外は以下のルールに従う
１：gap > 0 : 正解
ここから下は(gap < 0)を考える
２：|gap| <= 30 : いくつかのテストデータに正解している
　　テストデータの正解数（四捨五入）　＝　（その問題に登録されているテストデータの数）＊（30 - |gap|）/ 30
３：30 < |gap| <= 60  : テストデータが一問も合っていない
４：60 < |gap| <= 80  : 実行時エラー
４：80 < |gap| <= 100 : コンパイルエラー

このような分布にした根拠
gapはansとxとの差を表す。gapが負になる場合を想定した場合に
|gap| = 30は
(実力 - 難易度) <= 2
からでないと起こりえない現象である。
言い換えれば、「ある問題に対しての正解率が７割の人がいて、その人が似た問題に直面した時に多分正解するだろうけど、最悪部分点くらいは取る。」

次に
30 < |gap| <= 60は
2 < (実力 - 難易度) <= -1
で表すことができる。これは|gap| = 60の時を想定すると、自分の実力よりも１高い問題にチャレンジした場合に、「最悪でも実行時エラーはしない」
という仮定の元決めた

次に
60 < |gap| <= 80は
-1 < (実力 - 難易度) <= -3
を表す。これは|gap| = 80の時を想定すると、イメージとしては大学１年生が大学２〜３年生の問題を解くようなものである。
この場合、今までよりも複雑な実装が必要になるため、ミスが多くなると想定して定めた



